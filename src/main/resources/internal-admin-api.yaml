swagger: '2.0'
info:
  version: 1.0.13
  title: "Strategic IdAM Service API"
  description: "API Definitions for Strategic IdAM Service API"

paths:
  /pin:
    post:
      operationId: "createPin"
      description: "Generates a new PIN to be used in 'PIN in the Post' journeys."
      parameters:
        - in: body
          name: pinRequest
          required: false
          schema:
            $ref: '#/definitions/PinRequest'
      responses:
        200:
          description: "A PIN was created"
          schema:
            $ref: '#/definitions/Pin'
        500:
          description: "Internal system error"


    get:
      operationId: "loginWithPin"
      description: "Login with PIN. The PIN must have been generated by IdAM and sent to a user as
      part of a 'PIN in the Post' journey."
      produces:
        - application/json
      parameters:
        - in: header
          name: pin
          required: true
          type: string
        - in: formData
          name: redirect_uri
          description: "URI to redirect the user to after login. This should be one of the URIs
          registered with the OAuth2 client linked to the service initiating the login."
          required: true
          type: string
        - in: formData
          name: client_id
          description: OAuth2 client id of the service initiating the login.
          required: true
          type: string
        - in: formData
          name: state
          description: Optional state to be sent back to the initiating service after successful login.
          required: false
          type: string
      responses:
        200:
          description: "Logged in ok"
          schema:
            type: string
            description: "The OAuth2 code that can be used for obtaining an access token"
        401:
          description: "Pin user not found"

  /login:
    post:
      operationId: "loginUser"
      description: "Login with username and password. This implements the OAuth2 password grant
      flow - it exchanges a username and password for an access token directly."
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: userName
          description: The user's username
          required: true
          type: string
        - in: formData
          name: password
          description: The user's password
          required: true
          type: string
      responses:
        200:
          description: "Logged in ok"
          schema:
            type: string
            description: "The JWT token containing the roles information for the user"
        401:
          description: "Username password combination is incorrect"
        403:
          description: "The account is suspended or locked"
          schema:
            $ref: '#/definitions/ErrorResponse'

  /session/{access_token}:
    delete:
      operationId: "logout"
      parameters:
        - in: header
          name: authorization
          required: true
          type: string
          description: "Client credentials passed using Basic authentication scheme, e.g. Basic xxx"
        - in: path
          name: accessToken
          description: The access token associated to the session
          required: true
          type: string
      responses:
        204:
          desciption: "Success"
        400:
          description: "Bad request. This normally means that either client_id, or client_secret is missing."
        403:
          description: "Invalid credentials"


  /resetPassword:
    post:
      operationId: "resetPassword"
      description: "Reset password using JWT and code. The token and code are generated following
      a forgotPassword request and are sent to the user over email."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ResetPasswordRequest'
      responses:
        200:
          description: "Password is reset"
          schema:
            description: "password reset"
            $ref: '#/definitions/PasswordReset'
        500:
          description: "password reset unsuccessful"

  /validateResetPasswordToken:
    post:
      operationId: "validateResetPasswordToken"
      description: "Validate reset password JWT. The token is generated following a forgotPassword
      request and is sent to the user over email."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          description: JWT from the validation email
          required: true
          type: string
        - in: header
          name: code
          description: JWT from the validation email
          required: true
          type: string
      responses:
        200:
          description: "JWT is valid."
          schema:
            type: string
            description: "JWT is valid."
        400:
          description: "JWT is invalid (e.g. expired)."

  /forgotPassword:
    post:
      operationId: "forgotPassword"
      description: "Initiate password reset flow for the specified user. Following this request
      the user is sent a validation email containing JWT and code that can be used for changing
      the password."
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: request
          schema:
            $ref: '#/definitions/ForgotPasswordRequest'
      responses:
        204:
          description: "Validation email is sent."
          schema:
            type: string
            description: "success"
        403:
          description: "Redirect URI is not valid for the OAuth2 client."
        500:
          description: "Internal system error."

  /oauth2/authorize:
    post:
      operationId: "authorize"
      description: "Initiates an OAuth2 code grant flow."
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: "Uses Basic Authentication to identifying the principal making the request.
          For example - `Basic dXNlcm5hbWU6cGFzc3dvcmQ=`"
        - in: formData
          name: redirect_uri
          description: "URI to redirect the user to after successful authentication. This URL
          must match one of the registered URLs for the OAuth2 application linked to the service
          initiating the authentication flow."
          required: false
          type: string
        - in: formData
          name: client_id
          description: OAuth2 client id of the service initiating the OAuth2 flow.
          required: false
          type: string
        - in: formData
          name: state
          description: Optional state to be sent back to the initiating service after successful authentication.
          required: false
          type: string
        - in: formData
          name: scope
          description: Optional scopes to request.
          required: false
          type: string
        - in: formData
          name: response_type
          description: Response type to use for this request
          required: false
          type: string
      responses:
        200:
          description: "Authentication is successful."
          schema:
            type: string
            description: "The OAuth2 code"
        401:
          description: "Username password combination not found"
        403:
          description: "The account is suspended or locked"
          schema:
            $ref: '#/definitions/ErrorResponse'

  /oauth2/token:
    post:
      operationId: "getToken"
      description: "Allows a user to retrieve an OAuth2 access token from an OAuth2 code. "
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          required: false
          type: string
        - in: formData
          name: code
          description: "OAuth2 code returned by the /authorize call. Required when grant_type=authorization_code"
          required: false
          type: string
        - in: formData
          name: redirect_uri
          description: "URI to redirect the user to after successful authentication. The redirect
          URL in this request should match exactly the redirect URL that was included in the
          initial authorization request for this authorization code (/authorize)."
          required: false
          type: string
        - in: formData
          name: client_id
          description: "OAuth2 client id of the service initiating the OAuth2 flow."
          required: false
          type: string
        - in: formData
          name: client_secret
          description: "OAuth2 client secret of the service initiating the OAuth2 flow."
          required: false
          type: string
        - in: formData
          name: scope
          description: "The required scope."
          required: false
          type: string
        - in: formData
          name: grant_type
          description: "The grant type. Optional (defaults to 'authorization_code')"
          required: false
          type: string
      responses:
        200:
          description: "Authorized"
          schema:
            type: string
            description: "The JWT token containing the roles information for the user"
        403:
          description: "Username password combination not found"

  /login/uplift:
    post:
      operationId: "upliftUser"
      description: "Uplift a PIN user via Login. This allows an authenticated PIN user account to
      be 'upgraded' to an existing LoA1 account."
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: formData
          name: userName
          description: The existing user's username.
          required: true
          type: string
        - in: formData
          name: password
          description: The existing user's password.
          required: true
          type: string
        - in: formData
          name: jwt
          description: The authenticated PIN user's access token.
          required: true
          type: string
        - in: formData
          name: redirectUri
          description: "URI to redirect the user to after successful uplift. This URL
          must match one of the registered URLs for the OAuth2 application linked to the service
          initiating the authentication flow."
          required: true
          type: string
        - in: formData
          name: clientId
          description: OAuth2 client id of the service initiating the uplift journey.
          required: true
          type: string
        - in: formData
          name: state
          description: Optional state to be sent back to the initiating service after successful uplift.
          required: true
          type: string
        - in: formData
          name: scope
          description: Optional scope to be requested from the user.
          required: false
          type: string

      responses:
        200:
          description: "Successfully upgraded PIN account to an existing account."
          schema:
            type: string
            description: "The JWT token containing the roles information for the user"

  /details:
    get:
      operationId: "userInfo"
      description: "Get details about the authenticated user (e.g. user id, email, roles, etc)."
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: "Bearer token identifying the principal making the request. For example - `Bearer eyOjkahf.kahsfgh.vevhvuHFAG`"
      responses:
        200:
          description: "User details"
          schema:
            $ref: '#/definitions/User'

  /users:
    post:
      operationId: "registerUser"
      description: "Create a new user. Allows an IdAM internal admin to register a new user in the
      system and set their roles. Requires authorisation."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
      responses:
        201:
          description: "User created successfully"

    get:
      operationId: getUserByEmail
      description: "Search user by email address."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: query
          name: email
          type: string
          required: true
          description: "The email to search for"
      responses:
        200:
          description: "The details of a user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "The user does not exist."
          schema:
        500:
          description: "Internal system error."
          schema:
            $ref: '#/definitions/ErrorMap'

  /users/self:
    post:
      operationId: "selfRegisterUser"
      description: "Uplift a PIN user via Registration. This allows an authenticated PIN user account
      to be 'upgraded' to a brand new LoA1 account."
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/SelfRegisterRequest'
        - in: query
          name: jwt
          required: true
          type: string
          description: JWT token from PIN temp user
      responses:
        201:
          description: "User created successfully"

  /users/selfregister:
    post:
      operationId: "selfRegistration"
      description: "Self register a user via a registration process."
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/SelfRegisterRequest'
      responses:
        201:
          description: "User created successfully"

  /validate:
    post:
      operationId: "validateActivationToken"
      description: "Validate an activation token. The token is generated when the user is initially
        registered and is sent over email."
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ValidateRequest'
      responses:
        200:
          description: 'The token is valid.'
          schema:
            $ref: '#/definitions/ActivationResult'
            description: "validate activation token"
        410:
          description: 'The token is invalid (eg. expired).'

  /activate:
    patch:
      operationId: "activateUser"
      description: "Activate a user that has registered recently.
      This operation can be performed on users that have received an email with an activation link.
      The token and code in the link together with a user-provided password are used to complete
      the activation process."
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ActivateRequest'
      responses:
        200:
          description: 'Registration completed. The account is active and can now log in.'
          schema:
            $ref: '#/definitions/ActivationResult'
            description: "activate"

  /users/{userId}:
    get:
      operationId: getUser
      description: "Returns the user details."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
      responses:
        200:
          description: "The details of a user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "The user does not exist"
        500:
          description: "Server error"
          schema:
            $ref: '#/definitions/ErrorMap'
    patch:
      operationId: updateUser
      description: "Update user details"
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        200:
          description: "The details of a user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "The user  does not exist"
    delete:
      operationId: deleteUser
      description: "Deletes the user."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
      responses:
        200:
          description: "The user has been deleted"
        403:
          description: "You were unable to delete the user, you don't have permission."
        500:
          description: "Server error"
          schema:
            $ref: '#/definitions/ErrorMap'

  /users/{userId}/roles/{roleId}:
    patch:
      operationId: grantRole
      description: "Grants a role to a user"
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
        - in: path
          name: roleId
          type: string
          required: true
          description: "The id of the role"
      responses:
        200:
          description: "The details of a user"
          schema:
            $ref: '#/definitions/User'
        403:
          description: "The requestor does not have permission to assign this role"
        404:
          description: "The user or the role does not exist"
    delete:
      operationId: denyRole
      description: "Removes a role from a user"
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
        - in: path
          name: roleId
          type: string
          required: true
          description: "The id of the role"
      responses:
        200:
          description: "The details of a user"
          schema:
            $ref: '#/definitions/User'
        404:
          description: "The user or the role does not exist"

  /users/{userId}/status:
    put:
      operationId: userStatus
      description: "Sets the status of a user"
      produces:
        application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user"
        - in: body
          name: request
          required: true
          description: "The new status of the account"
          schema:
            $ref: '#/definitions/UserStatus'
      responses:
        200:
          description: "The status of the account"
          schema:
            $ref: '#/definitions/UserStatusResult'
        404:
          description: "Account not found"

  /roles:
    post:
      operationId: createRole
      description: "Creates a new role in the system"
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        201:
          description: "The role was created successfully"
          schema:
            $ref: '#/definitions/Role'
        403:
          description: "You were unable to create that role, you don't have permission"
        409:
          description: "That role already exists. Use PUT to update"
    get:
      operationId: "getAllRoles"
      description: "Returns an array of all roles"
      security:
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: query
          name: filterType
          description: "Filters the roles on a given filter type (e.g filterType=service)"
          type: string
          required: false
        - in: query
          name: filterValue
          description: "The value of the filter to use (e.g filterValue=CMC)"
          type: string
          required: false
      responses:
        200:
          description: "A list of roles available"
          schema:
            $ref: '#/definitions/ArrayOfRoles'


  /roles/{roleId}:
    put:
      operationId: "updateRole"
      description: "Updates a specified role in the system"
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: roleId
          type: string
          required: true
          description: "The id of the role to update"
        - in: body
          name: request
          required: true
          description: "The role data that you wish to update"
          schema:
            $ref: '#/definitions/UpdateRole'
      responses:
        200:
          description: "The role was updated"
          schema:
            $ref: '#/definitions/Role'
        403:
          description: "You don't have permission to update that role"
        404:
          description: "The role was not found"
    get:
      operationId: "getRole"
      description: "Gets the specified role from the system."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: roleId
          type: string
          required: true
          description: "The roleId of the role to retrieve"
      responses:
        200:
          description: "The role that was requested"
          schema:
            $ref: '#/definitions/Role'
        404:
          description: "That role was not found"

  /roles/{roleId}/assignableRoles:
    put:
      operationId: "updateAssignableRoles"
      description: "Updates the array of assignable roles that the specified role can assign to other users."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: roleId
          type: string
          required: true
          description: "The id of the role to update"
        - in: body
          name: request
          description: "An request containing an array of roles that the current role can assign to other users."
          required: true
          schema:
            $ref: '#/definitions/ArrayOfStrings'
      responses:
        200:
          description: "The assignable roles were updated for the specified role"
          schema:
            $ref: '#/definitions/Role'
        401:
          description: "You don't have permission to update the role"
        404:
          description: "The role was not found"
    get:
      operationId: "getAssignableRoles"
      description: "Gets an array of roles that this role is allowed to assign to other users."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: roleId
          type: string
          required: true
          description: "The id of the role to retrieve the assignable roles for"
      responses:
        200:
          description: "Array of the roles that this role is allowed to assign"
          schema:
            $ref: '#/definitions/ArrayOfStrings'
        404:
          description: "The role was not found"

  /roles/name/{name}:
    get:
      operationId: "getRoleByName"
      description: "Gets the specified role from the system."
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: name
          type: string
          required: true
          description: "The name of the role to retrieve"
      responses:
        200:
          description: "The role that was requested"
          schema:
            $ref: '#/definitions/Role'
        404:
          description: "That role was not found"

  /services:
    post:
      operationId: createService
      description: Creates/Registers a new service
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ServiceUpdate'
      responses:
        201:
          description: "Service was created"
          schema:
            $ref: '#/definitions/Service'
        403:
          description: "You were unable to create that service, you don't have permission"
        408:
          description: 'Service already exists. Use PUT to update'
    get:
      operationId: getServices
      description: "Returns an array of all the services"
      parameters:
        - in: header
          name: Authorization
          type: string
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: query
          name: clientId
          type: string
          description: If supplied, filters the list of services which are associated to this clientId
      responses:
        200:
          description: "An array of the registered services in the system"
          schema:
            $ref: '#/definitions/ArrayOfServices'


  /services/{serviceId}:
    put:
      operationId: "updateService"
      description: Updates a specified service in the system
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: serviceId
          type: string
          required: true
          description: The serviceId of the service to update
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ServiceUpdate'
      responses:
        200:
          description: Service was updated
          schema:
            $ref: '#/definitions/Service'
        404:
          description: The service was not found
    get:
      operationId: "getService"
      description: Gets the specified service from the system
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: serviceId
          type: string
          required: true
          description: The serviceId to retrieve
      responses:
        200:
          description: The specified service
          schema:
            $ref: '#/definitions/Service'
        404:
          description: The service was not found

  /services/{serviceId}/roles:
    get:
      operationId: getRolesForService
      description: Gets all the roles assigned to a given service
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: serviceId
          type: string
          required: true
          description: The serviceId of the roles to retrieve
      responses:
        200:
          description: An array of roles associated with this
          schema:
            $ref: '#/definitions/ArrayOfStrings'
        404:
          description: The service was not found

    put:
      operationId: putRolesForService
      description: Modifies the roles for a given service
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: serviceId
          type: string
          required: true
          description: The serviceId of the roles to retrieve
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/ArrayOfStrings'
      responses:
        200:
          description: The updated service
          schema:
            $ref: '#/definitions/Service'
        404:
          description: The service was not found


  /agents/{clientId}:
    get:
      operationId: getOAuth2Agent
      description: Gets an OAuth2 Agent by clientId
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: clientId
          type: string
          required: true
          description: The clientId of the agent to retrieve
      responses:
        200:
          description: The OAuth2 Agent
          schema:
            $ref: '#/definitions/OAuth2Agent'
        403:
          description: "Forbidden"
        404:
          description: The agent was not found

  /invite:
    post:
      operationId: inviteNewUser
      description: Invites a new user to join a service.
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/RegisterRequest'
      responses:
        201:
          description: "User was created"
        403:
          description: "You were unable to create the user, you don't have permission."

  /invite/{userId}/service/{serviceId}:
    patch:
      operationId: inviteExistingUser
      description: Invite an existing user to join a service.
      parameters:
        - in: header
          name: Authorization
          type: string
          required: true
          description: The Base64-encoded authorization token
          example: AdminApiAuthToken [api-auth-token]
        - in: path
          name: userId
          type: string
          required: true
          description: "The id of the user to invite"
        - in: path
          name: serviceId
          type: string
          required: true
          description: "The id of the service to onboard"
      responses:
        201:
          description: "User was invited to the service"
        403:
          description: "You were unable to invite the user, you don't have permission"

  /health:
    get:
      operationId: "health"
      description: "Heartbeat"
      produces:
        - application/json
      responses:
        200:
          description: "API is live"

  /jwks:
    get:
      operationId: jsonWebKeySet
      description: "Returns all JWKs used to sign all IdAM issued JWTs. This is a set of keys
      containing the public keys that should be used to verify any JWT issued by the authorization
      server."
      produces:
        - application/json
      responses:
        200:
          description: JSON Web Key Set (JWKS)
          schema:
            $ref: '#/definitions/JsonWebKeySet'

  /testing-support/accounts/{accountId:.+}:
    get:
      operationId: "getAccount"
      description: "Fetch a test account via ID"
      parameters:
        - in: path
          name: accountId
          type: string
          required: true
          description: "The id of the user to invite"
      responses:
        200:
          description: "The requested account was found and returned"
          schema:
            $ref: '#/definitions/Account'
        404:
          description: "The account doesn't exist."

  /testing-support/accounts:
    post:
      operationId: "createTestAccount"
      description: "Create a test account"
      parameters:
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/TestUserRequest'
      responses:
        201:
          description: "Account created"
        409:
          description: "The user already exists."

  /testing-support/pact-state-change:
    post:
      operationId: "pactStateChange"
      description: "Handles the requested state changes for pact testing"
      parameters:
      - name: pactState
        in: body
        required: true
        schema:
          $ref: '#/definitions/PactState'
        description: "Pact will supply the declared state in this format"
      responses:
        200:
          description: "State changed and response contains relevant data"
          schema:
            type: object
        400:
          description: "State parameter is malformed or unsupported"

  /testing-support/test-data:
    delete:
      operationId: "deleteAllTestData"
      description: "Delete all test data"
      parameters:
        - in: query
          name: testDataPrefix
          type: string
          required: false
          description: "Prefix for test data names"
        - in: query
          name: userNames
          type: array
          items:
            type: string
          required: false
          description: "Test user names to delete"
        - in: query
          name: roleNames
          type: array
          items:
            type: string
          required: false
          description: "Test role names to delete"
        - in: query
          name: serviceNames
          type: array
          items:
            type: string
          required: false
          description: "Test service names to delete"
        - in: query
          name: async
          type: boolean
          required: false
          description: "Flag to run this call asynchronously and skip waiting for its response"
      responses:
        200:
          description: "Test data deleted OK"
          schema:
            $ref: '#/definitions/DeletedData'

  /testing-support/accounts/{username:.+}:
    delete:
      operationId: "deleteTestAccount"
      description: "Delete an account"
      parameters:
        - in: path
          name: username
          type: string
          required: true
      responses:
        200:
          description: "The user has been deleted"
        404:
          description: "User does not exist"

  /testing-support/accounts/pin/{userId:.+}:
    get:
      operationId: "getPinByUserId"
      description: "Gets the pin by userId"
      parameters:
        - in: path
          name: userId
          type: string
          required: true
      responses:
        200:
          description: "The user pin has been found"
          schema:
            type: string
            description: "The user pin"
        404:
          description: "User Not Found or Not a PIN User"

  /testing-support/services/{service:.+}:
    delete:
      operationId: "deleteTestService"
      description: "Delete a service and his roles"
      parameters:
        - in: path
          name: service
          type: string
          required: true
      responses:
        200:
          description: "The service has been deleted"
        404:
          description: "Could not find the service"
    patch:
      operationId: "patchService"
      description: "Apply partial modifications to a service"
      parameters:
        - in: path
          name: service
          type: string
          required: true
        - in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/PatchRequest'
      responses:
        204:
          description: "The service has been updated"
        404:
          description: "Could not find the service"

  /testing-support/roles/{role:.+}:
    delete:
      operationId: "deleteTestRole"
      description: "Delete a role"
      parameters:
        - in: path
          name: role
          type: string
          required: true
      responses:
        200:
          description: "The role has been deleted"
        404:
          description: "Could not find the role"

  /testing-support/purgependingusers:
    post:
      operationId: "purgePendingUsers"
      description: "Purge pending users"
      responses:
        200:
          description: "Job started"

  /testing-support/cache/refresh:
    post:
      operationId: "cacheRefresh"
      description: "Refresh the cache"
      response:
        200:
          description: "Job started"

definitions:
  Account:
    title: Account
    type: object
    properties:
      id:
        description: Unique ID for the user
        type: string
      forename:
        description: The first name of the user
        type: string
      surname:
        description: The last name of the user
        type: string
      email:
        description: The email of the user
        pattern: ^[^()!&/;%*@]+@[^()!&/;%*@]+\.[^()!&/;%*@]+$
        type: string
      active:
        description: Flag indicating whether the user is active (false means the user is suspended).
        type: boolean
      locked:
        readOnly: true
        description: Flag indicating whether the user is locked (false means the user is active).
        type: boolean
      roles:
        description: The list of the roles of the user
        type: array
        items:
          type: string
      linkedRoles:
        description: Extra, usually hidden roles the user may have been granted
        type: array
        items:
          type: string
      lastModified:
        description: The date and time this user was last modified.
        type: string

  ValidateRequest:
    type: object
    properties:
      token:
        type: string
        description: JWT token provided in the activation email
      code:
        type: string
        description: Unique string provided inthe activation email
    required: [token, code]

  ValidateJWT:
    type: object
    properties:
      valid:
        type: boolean
        description: Returns if the token is valid?
      uid:
        type: string
        description: user id
      realm:
        type: string
        description: realm
    required: [isValid, uid]

  AccessTokenInfo:
    type: object
    properties:
      sub:
        type: string
      scope:
        type: array
        items:
          type: string

  IdTokenInfo:
    type: object
    properties:
      sub:
        type: string
      name:
        type: string
      tokenType:
        type: string
      aud:
        type: string
      roles:
        type: array
        items:
          type: string
          description: An array of role names

  ActivateRequest:
    type: object
    properties:
      token:
        type: string
        description: JWT token provided in the activation email
      code:
        type: string
        description: Unique string provided in the activation email
      password:
        type: string
        minLength: 8
        maxLength: 256
        description: Password supplied by the user which will be set on his account
    required: [token, code, password]

  ActivationResult:
    type: object
    properties:
      uuid:
        type: string
        description: User's unique identifier
      redirectUri:
        type: string
        description: The redirection URI for login

  PinRequest:
    type: object
    properties:
      firstName:
        type: string
        description: First name to be linked to the newly generated PIN
      lastName:
        type: string
        description: Last name to be linked to the newly generated PIN
    required: [firstName, lastName]

  Service:
    type: object
    properties:
      label:
        type: string
        description: Unique Identifier for the Service
      description:
        type: string
        description: The description of the service
      allowedRoles:
        type: array
        items:
          type: string
      onboardingEndpoint:
        type: string
        description: The endpoint used to notify the service about users on-boarding
      onboardingRoles:
        type: array
        items:
          type: string
      oauth2ClientId:
        type: string
        description: The Oauth2 Client Id
      oauth2Scope:
        type: string
        description: The Oauth2 Client scope
      activationRedirectUrl:
        type: string
        description: The url to take a user to after their account is activated.
      selfRegistrationAllowed:
        type: boolean
        description: Flag indicating whether Self-service registration is enabled for this service.
    required: [label, description, allowedRoles]

  ServiceUpdate:
    type: object
    properties:
      label:
        type: string
        description: Short Identifier for the Service
      description:
        type: string
        description: The description of the service
      allowedRoles:
        type: array
        items:
          type: string
      onboardingEndpoint:
        type: string
        description: The endpoint used to notify the service about users on-boarding
      onboardingRoles:
        type: array
        items:
          type: string
      oauth2ClientId:
        type: string
        description: The Oauth2 Client Id
      oauth2ClientSecret:
        type: string
        description: The Oauth2 Client secret
      oauth2RedirectUris:
        type: array
        items:
          type: string
      oauth2Scope:
        type: string
      activationRedirectUrl:
        type: string
        description: The url to take a user to after their account is activated.
      selfRegistrationAllowed:
        type: boolean
        description: Flag indicating whether Self-service registration is enabled for this service. If omitted, defaults to false.
    required: [label, description, allowedRoles]

  OAuth2Agent:
    type: object
    properties:
      clientId:
        type: string
        description: Unique ID if the agent
      clientSecret:
        type: string
        description: The agent password
      scopes:
        type: array
        items:
          type: string
        description: The scopes available to this agent
      redirectUris:
        type: array
        items:
          type: string
          format: uri
        description: The allowed redirect URIs
    required: [clientId, clientPassword, redirectUris]

  Pin:
    type: object
    properties:
      pin:
        type: string
        description: The PIN
      expiry:
        type: string
        description: The expiry date
      userId:
        type: string
        description: user id of the user
    required: [code, expiry, userId, roleId]

  LoginWithPin:
    type: object
    properties:
      token:
        type: string
        description: jwt token
    required: [pin]

  ArrayOfServices:
    type: array
    items:
      $ref: '#/definitions/Service'

  PactState:
    type: object
    properties:
      state:
        type: string
        description: The name of the pact state eg. "Given A pact state", where "A pact state is" the name
      params:
        type: object
        additionalProperties:
          type: object

  TestUserRequest:
    type: object
    properties:
      id:
        type: string
        description: The user id
      email:
        type: string
        pattern: ^[^()!&/;%*@]+@[^()!&/;%*@]+\.[^()!&/;%*@]+$
        description: The user email address
      forename:
        type: string
        description: The user forename
      surname:
        type: string
        description: The user surname
      password:
        type: string
        description: The user password
      roles:
        type: array
        description: The list of the roles of the user
        items:
          $ref: '#/definitions/RoleDetail'
      userGroup:
        description: The user group
        $ref: '#/definitions/RoleDetail'
    required: [email, forname, surname, password]

  PasswordReset:
    type: object
    properties:
      redirectUri:
        type: string
        description: The redirection URI for login

  ForgotPasswordRequest:
    type: object
    properties:
      email:
        type: string
        pattern: ^[^()!&/;%*@]+@[^()!&/;%*@]+\.[^()!&/;%*@]+$
        description: Email identifying the user account
      redirectUri:
        type: string
        description: "URI to redirect the user to after password reset is completed. This URL
        must match one of the registered URLs for the OAuth2 application linked to the service
        initiating the reset password journey."
      clientId:
        type: string
        description: OAuth2 client id of the service where the reset password journey started
    required: [email]

  ResetPasswordRequest:
    type: object
    properties:
      password:
        required: true
        type: string
        minLength: 8
        maxLength: 256
        description: New password for the user
      token:
        required: true
        type: string
        description: JWT from the validation email
      code:
        required: true
        type: string
        description: Code from the validation email

  UserStatus:
    type: object
    properties:
      status:
        type: string
        enum: [active, inactive]

  UserStatusResult:
    type: object
    properties:
      status:
        type: string
        description: "The status of the account"

  PatchRequest:
    type: array
    items:
      $ref: "#/definitions/PatchOperation"

  PatchOperation:
    description: Patch Request Object
    required:
      - "operation"
      - "field"
      - "value"
    properties:
      operation:
        type: string
        description: The operation of the patch
        enum:
          - "add"
          - "remove"
          - "replace"
          - "move"
          - "copy"
          - "test"
      field:
        type: string
        description: field in patch object
      value:
        type: object
        description: The value to patch.

  ErrorResponse:
    type: object
    properties:
      code:
        type: string
        description: "The error code"
        enum:
          - "ACCOUNT_LOCKED"
          - "ACCOUNT_SUSPENDED"
          - "PASSWORD_BLACKLISTED"
          - "TOKEN_INVALID"

  JsonWebKeySet:
    type: object
    properties:
      keys:
        description: "The value of the \"keys\" parameter is an array of JWK values."
        type: array
        items:
          $ref: "#/definitions/JsonWebKey"

  JsonWebKey:
    type: object
    properties:
      alg:
        type: string
        description: Algorithm intended for use with the key
      kty:
        type: string
        description: The cryptographic algorithm family used with the key, such as "RSA" or "EC"
      use:
        type: string
        description: "The intended use of the public key, such as \"sig\" (signature),
        \"enc\" (encryption)"
      kid:
        type: string
        description: Unique identifier for the key. It is used to match a specific key.
      n:
        type: string
        description: The modulus for a standard pem
      e:
        type: string
        description: The exponent for a standard pem
      x5c:
        type: string
        description: The x.509 certificate chain
      x5t:
        type: string
        description: The thumbprint of the x.509 cert (SHA-1 thumbprint)
      crv:
        type: string
        description: The cryptographic curve used with the key (one of P-256, P-384, P-521)
      d:
        type: string
        description: "The Elliptic Curve private key value or the private exponent value for
        the RSA private key"
      dp:
        type: string
        description: "For an RSA private key, contains the Chinese Remainder Theorem (CRT)
        exponent of the first factor"
      dq:
        type: string
        description: For an RSA private key, contains the CRT exponent of the second factor
      k:
        type: string
        description: Contains the value of the symmetric (or other single-valued) key
      p:
        type: string
        description: For an RSA private key, contains the first prime factor.
      q:
        type: string
        description: For an RSA private key, contains the second prime factor.
      qi:
        type: string
        description: For an RSA private key, contains the CRT coefficient of the second factor
      x:
        type: string
        description: The x coordinate for the Elliptic Curve point
      y:
        type: string
        description: The y coordinate for the Elliptic Curve point

  DeletedData:
    type: object
    properties:
      testDataPrefix:
        type: string
        description: Prefix for test data names requested to delete
      userNamesRequested:
        type: array
        items:
          type: string
        description: Test user names requested to delete
      userNamesFound:
        type: array
        items:
          type: string
        description: Test user names that matched to delete
      userNamesDeleted:
        type: array
        items:
          type: string
        description: Test user names that succeeded to delete
      userNamesFailed:
        type: array
        items:
          type: string
        description: Test user names that failed to delete
      roleNamesRequested:
        type: array
        items:
          type: string
        description: Test role names requested to delete
      roleNamesFound:
        type: array
        items:
          type: string
        description: Test role names that matched to delete
      roleNamesDeleted:
        type: array
        items:
          type: string
        description: Test role names that succeeded to delete
      roleNamesFailed:
        type: array
        items:
          type: string
        description: Test role names that failed to delete
      serviceNamesRequested:
        type: array
        items:
          type: string
        description: Test service names requested to delete
      serviceNamesFound:
        type: array
        items:
          type: string
        description: Test service names that matched to delete
      serviceNamesDeleted:
        type: array
        items:
          type: string
        description: Test service names that succeeded to delete
      serviceNamesFailed:
        type: array
        items:
          type: string
        description: Test service names that failed to delete
